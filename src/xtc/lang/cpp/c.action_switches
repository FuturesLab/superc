        case 2:
    {
          try {
            OutputStreamWriter writer = new OutputStreamWriter(System.out);

            // writing initial transformation code
            writer.write("#include <stdbool.h>\n");
            writer.write("#include \"desugared_macros.h\" // configuration macros converted to C variables\n");

            // writing file-dependent transformation code
            writer.write(getStringBuilderAt(subparser, 1).toString());
            writer.flush();
          }
          catch(Exception IOException) {
            System.err.println("ERROR: unable to write output");
            System.exit(1);
          }
        }
    break;

  case 4:
    {
          StringBuilder sb = new StringBuilder();
          for (int i = 1; i <= 2; i++)
            sb.append(getStringBuilderAt(subparser, i));
          setStringBuilder(value, sb);
        }
    break;

  case 6:
    {
          StringBuilder sb = new StringBuilder();
          for (int i = 1; i <= 2; i++)
            sb.append(getStringBuilderAt(subparser, i));
          setStringBuilder(value, sb);
        }
    break;

  case 7:
    {
          StringBuilder sb = new StringBuilder();
          for (int i = 1; i <= 2; i++)
            sb.append(getStringBuilderAt(subparser, i));
          setStringBuilder(value, sb);
        }
    break;

  case 8:
    {
          StringBuilder sb = new StringBuilder();
          for (int i = 1; i <= 2; i++)
            sb.append(getStringBuilderAt(subparser, i));
          setStringBuilder(value, sb);
        }
    break;

  case 11:
    {
          StringBuilder sb = new StringBuilder();
          for (int i = 1; i <= 2; i++)
            sb.append(getStringBuilderAt(subparser, i));
          setStringBuilder(value, sb);
        }
    break;

  case 12:
    { ReenterScope(subparser); }
    break;

  case 13:
    { ExitScope(subparser); }
    break;

  case 15:
    {
          ReenterScope(subparser);
          {
            StringBuilder sb = new StringBuilder();
            for (int i = 1; i <= 2; i++)
              sb.append(getStringBuilderAt(subparser, i));
            setStringBuilder(value, sb);
          }
        }
    break;

  case 16:
    { ExitScope(subparser); }
    break;

  case 19:
    { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 20:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 21:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 22:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 23:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 24:
    { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 25:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 26:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 27:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 28:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 29:
    { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 30:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 31:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 32:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 33:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 34:
    { ReenterScope(subparser); }
    break;

  case 35:
    { ExitScope(subparser); }
    break;

  case 37:
    { ReenterScope(subparser); }
    break;

  case 38:
    { ExitScope(subparser); }
    break;

  case 40:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 41:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 42:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 43:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 44:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 45:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 46:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 47:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 48:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 49:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 50:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 51:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 54:
    { KillReentrantScope(subparser); }
    break;

  case 56:
    { KillReentrantScope(subparser); }
    break;

  case 58:
    { KillReentrantScope(subparser); }
    break;

  case 60:
    { KillReentrantScope(subparser); }
    break;

  case 62:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 64:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 66:
    {
          // reuses saved base type
          bindIdent(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 1));
        }
    break;

  case 68:
    {
      	  TypeBuilder type = getTypeBuilderAt(subparser, 5);
      	  DeclBuilder decl = getDeclBuilderAt(subparser, 4);
      	  addMapping(subparser, type, decl);
      	  saveBaseType(subparser, getNodeAt(subparser, 5));
          bindIdent(subparser, getNodeAt(subparser, 5), getNodeAt(subparser, 4));
        }
    break;

  case 69:
    {
      	  DeclBuilder decl = getDeclBuilderAt(subparser, 1);
      	  TypeBuilder type = getTypeBuilderAt(subparser, 2);
      	  addMapping(subparser, type, decl);

          // stores the written variable renaming declarations
          System.out.println(genRenamingDecls(subparser, decl, type.toType()));
          // TODO: store this written code here
          //setStringBuilder(value, genRenamingDecls(subparser, decl, type.toType()));


      	  saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 71:
    {
          // reuses saved base type
	        bindIdent(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 1));
        }
    break;

  case 73:
    {
	  			TypeBuilder decl = getTypeBuilderAt(subparser, 1);
	  			setTypeBuilder(value, decl);
				}
    break;

  case 74:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 75:
    {
	 				TypeBuilder decl = getTypeBuilderAt(subparser, 1);
	  			setTypeBuilder(value, decl);
				}
    break;

  case 76:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 77:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 78:
    {
					setTypeBuilder(value,getTypeBuilderAt(subparser,1));
				}
    break;

  case 79:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 80:
    {
					setTypeBuilder(value,getTypeBuilderAt(subparser,1));
				}
    break;

  case 81:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 82:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 83:
    {
	  TypeBuilder storage = getTypeBuilderAt(subparser,1);
	  setTypeBuilder(value, storage);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 84:
    {
	  TypeBuilder qualList = getTypeBuilderAt(subparser, 2);
	  TypeBuilder storage = getTypeBuilderAt(subparser, 1);
	  TypeBuilder tb = qualList.combine(storage);
	  setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 85:
    {
	  TypeBuilder qualList = getTypeBuilderAt(subparser, 2);
	  TypeBuilder qual = getTypeBuilderAt(subparser, 1);
	  TypeBuilder tb = qualList.combine(qual);
	  setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 86:
    {
	  TypeBuilder qual = getTypeBuilderAt(subparser, 1);
	  setTypeBuilder(value, qual);
	   updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 87:
    {
	  TypeBuilder qualList = getTypeBuilderAt(subparser, 2);
	    TypeBuilder qual = getTypeBuilderAt(subparser, 1);
	    TypeBuilder tb = qualList.combine(qual);
	    setTypeBuilder(value, tb);
	    updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 88:
    {
  TypeBuilder qual = getTypeBuilderAt(subparser, 1);
  setTypeBuilder(value, qual);

}
    break;

  case 89:
    {
  TypeBuilder storage = getTypeBuilderAt(subparser, 1);
  setTypeBuilder(value, storage);

}
    break;

  case 90:
    {
  TypeBuilder qual = new TypeBuilder("const");
  setTypeBuilder(value, qual);
  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
}
    break;

  case 91:
    {
  TypeBuilder qual = new TypeBuilder("volatile");
  setTypeBuilder(value, qual);
  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
}
    break;

  case 92:
    {
  TypeBuilder qual = new TypeBuilder("restrict");
	  setTypeBuilder(value, qual);
updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
}
    break;

  case 93:
    {
  System.err.println("Unsupported grammar"); // TODO
  System.exit(1);
  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
}
    break;

  case 94:
    {
  TypeBuilder qual = new TypeBuilder("inline");
  setTypeBuilder(value, qual);
  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
}
    break;

  case 107:
    {
	  TypeBuilder basicTypeSpecifier = getTypeBuilderAt(subparser, 2);
          TypeBuilder storageClass = getTypeBuilderAt(subparser, 1);

          // combine the partial type specs
          TypeBuilder tb = basicTypeSpecifier.combine(storageClass);

          setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 108:
    {
	  TypeBuilder qualList = getTypeBuilderAt(subparser, 2);
          TypeBuilder basicTypeName = getTypeBuilderAt(subparser, 1);

          // combine the partial type specs
          TypeBuilder tb = qualList.combine(basicTypeName);

	  setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 109:
    {
 	  TypeBuilder decl = getTypeBuilderAt(subparser, 2);
          TypeBuilder qual = getTypeBuilderAt(subparser, 1);

          // combine the partial type specs
          TypeBuilder tb = decl.combine(qual);

	  setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 110:
    {
	  TypeBuilder basicDeclSpecifier = getTypeBuilderAt(subparser, 2);
          TypeBuilder basicTypeName = getTypeBuilderAt(subparser, 1);

          // combine the partial type specs
          TypeBuilder tb = basicDeclSpecifier.combine(basicTypeName);

	  setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
	}
    break;

  case 111:
    {
          // TUTORIAL: a semantic action that sets the semantic value
          // to a new typebuilder by adding a property derived from
          // the child semantic value(s)
          TypeBuilder tb = getTypeBuilderAt(subparser, 1);
          setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 112:
    {
          TypeBuilder qualList = getTypeBuilderAt(subparser, 2);
          TypeBuilder basicTypeName = getTypeBuilderAt(subparser, 1);

          TypeBuilder tb = qualList.combine(basicTypeName);

          setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 113:
    {
          TypeBuilder basicTypeSpecifier = getTypeBuilderAt(subparser, 2);
          TypeBuilder qual = getTypeBuilderAt(subparser, 1);

          TypeBuilder tb = basicTypeSpecifier.combine(qual);

          setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 114:
    {
          // get the semantic values of each child
          TypeBuilder basicTypeSpecifier = getTypeBuilderAt(subparser, 2);
          TypeBuilder basicTypeName = getTypeBuilderAt(subparser, 1);

          // combine the partial type specs
          TypeBuilder tb = basicTypeSpecifier.combine(basicTypeName);

          setTypeBuilder(value, tb);
	  updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 121:
    {
					TypeBuilder tb = getTypeBuilderAt(subparser, 2);
          TypeBuilder tb1 = getTypeBuilderAt(subparser, 1);
          setTypeBuilder(value, tb.combine(tb1));
				}
    break;

  case 122:
    {
					TypeBuilder tb = getTypeBuilderAt(subparser, 2);
          TypeBuilder tb1 = new TypeBuilder();
					tb1.setTypedef(getStringAt(subparser, 1));
          setTypeBuilder(value, tb.combine(tb1));
				}
    break;

  case 123:
    {
					TypeBuilder tb1 = getTypeBuilderAt(subparser, 2);
					TypeBuilder dq = getTypeBuilderAt(subparser,1);
					TypeBuilder tb = tb1.combine(dq);
          setTypeBuilder(value, tb);
				}
    break;

  case 124:
    {
					TypeBuilder tb1 = new TypeBuilder();
					tb1.setTypedef(getStringAt(subparser, 1));
          setTypeBuilder(value, tb1);
				}
    break;

  case 125:
    {
					TypeBuilder tb = getTypeBuilderAt(subparser, 2);
          TypeBuilder tb1 = new TypeBuilder();
					tb1.setTypedef(getStringAt(subparser, 1));
          setTypeBuilder(value, tb.combine(tb1));
				}
    break;

  case 126:
    {
					TypeBuilder tb = getTypeBuilderAt(subparser, 2);
          TypeBuilder tb1 = getTypeBuilderAt(subparser, 1);
          setTypeBuilder(value, tb.combine(tb1));
				}
    break;

  case 140:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 141:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 142:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 143:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 144:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 145:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 146:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 147:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 148:
    { getSpecsAt(subparser, 1).type = InternalT.VA_LIST; }
    break;

  case 149:
    {
	    TypeBuilder storage = new TypeBuilder("typedef");
	    setTypeBuilder(value, storage);
	    getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_TYPEDEF;
	  }
    break;

  case 150:
    {
	      TypeBuilder storage = new TypeBuilder("extern");
	      setTypeBuilder(value, storage);
	      getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_EXTERN;
	    }
    break;

  case 151:
    {
	      TypeBuilder storage = new TypeBuilder("static");
	      setTypeBuilder(value, storage);
	      getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_STATIC;
	    }
    break;

  case 152:
    {
	      TypeBuilder storage = new TypeBuilder("auto");
	      setTypeBuilder(value, storage);
	      getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_AUTO;
	    }
    break;

  case 153:
    {
	      TypeBuilder storage = new TypeBuilder("register");
	      setTypeBuilder(value, storage);
	      getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_REGISTER;
	    }
    break;

  case 154:
    {
          TypeBuilder tb = new TypeBuilder(VoidT.TYPE);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).type = VoidT.TYPE;
        }
    break;

  case 155:
    {
          TypeBuilder tb = new TypeBuilder(NumberT.CHAR);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenChar = true;
        }
    break;

  case 156:
    {
          TypeBuilder tb = new TypeBuilder(NumberT.SHORT);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenShort = true;
        }
    break;

  case 157:
    {

          // See xtc.type.* for the class hiearchy for types
          TypeBuilder tb = new TypeBuilder(NumberT.INT);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenInt = true;
        }
    break;

  case 158:
    {
          TypeBuilder tb = new TypeBuilder(NumberT.__INT128);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenInt = true;
        }
    break;

  case 159:
    {
          // See xtc.type.* for the class hiearchy for types
          TypeBuilder tb = new TypeBuilder(NumberT.LONG);
	  setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).longCount++;
        }
    break;

  case 160:
    {
          TypeBuilder tb = new TypeBuilder(NumberT.FLOAT);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenFloat = true;
        }
    break;

  case 161:
    {
          TypeBuilder tb = new TypeBuilder(NumberT.DOUBLE);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenDouble = true;
        }
    break;

  case 162:
    {
          TypeBuilder tb = new TypeBuilder("signed");
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenSigned = true;
        }
    break;

  case 163:
    {
          TypeBuilder tb = new TypeBuilder("unsigned");
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenUnsigned = true;
        }
    break;

  case 164:
    {
          TypeBuilder tb = new TypeBuilder(BooleanT.TYPE);
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenBool = true;
        }
    break;

  case 165:
    {
	  TypeBuilder tb = new TypeBuilder("complex");
          setTypeBuilder(value, tb);
	  getSpecsAt(subparser, 1).seenComplex = true;
        }
    break;

  case 174:
    { EnterScope(subparser); }
    break;

  case 175:
    { ExitScope(subparser); }
    break;

  case 176:
    {
          Node tag     = null;
          Node members = getNodeAt(subparser, 3);
          Node attrs   = null;
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 177:
    { EnterScope(subparser); }
    break;

  case 178:
    { ExitScope(subparser); }
    break;

  case 179:
    {
          Node tag     = getNodeAt(subparser, 6);
          Node members = getNodeAt(subparser, 3);
          Node attrs   = null;
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 181:
    { EnterScope(subparser); }
    break;

  case 182:
    { ExitScope(subparser); }
    break;

  case 183:
    {
          Node tag     = null;
          Node members = getNodeAt(subparser, 3);
          Node attrs   = getNodeAt(subparser, 6);
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 184:
    { EnterScope(subparser); }
    break;

  case 185:
    { ExitScope(subparser); }
    break;

  case 186:
    {
          Node tag     = getNodeAt(subparser, 6);
          Node members = getNodeAt(subparser, 3);
          Node attrs   = getNodeAt(subparser, 7);
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 188:
    { EnterScope(subparser); }
    break;

  case 189:
    { ExitScope(subparser); }
    break;

  case 191:
    { EnterScope(subparser); }
    break;

  case 192:
    { ExitScope(subparser); }
    break;

  case 195:
    { EnterScope(subparser); }
    break;

  case 196:
    { ExitScope(subparser); }
    break;

  case 198:
    { EnterScope(subparser); }
    break;

  case 199:
    { ExitScope(subparser); }
    break;

  case 202:
    {
          ((Node) value).setProperty(SPECS, new Specifiers());
        }
    break;

  case 203:
    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 232:
    { BindEnum(subparser); }
    break;

  case 234:
    { BindEnum(subparser); }
    break;

  case 252:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 254:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 256:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 258:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 260:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 262:
    {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 266:
    { BindVar(subparser); }
    break;

  case 296:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 297:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 298:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 299:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 300:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 301:
    {
          setDeclBuilder(value, new DeclBuilder(getStringAt(subparser, 1)));
        }
    break;

  case 302:
    {
	  DeclBuilder name = new DeclBuilder(getStringAt(subparser, 2));
	  DeclBuilder post = getDeclBuilderAt(subparser,1);
	  name.merge(post);
          setDeclBuilder(value, name);
        }
    break;

  case 303:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 304:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 305:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  db.addPointer();
	  setDeclBuilder(value, db);
	}
    break;

  case 306:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 307:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addDeclBuilder(getDeclBuilderAt(subparser,2));
	  setDeclBuilder(value, db);
	}
    break;

  case 308:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addDeclBuilder(getDeclBuilderAt(subparser,3));
	  db.merge(getDeclBuilderAt(subparser,1));
	  setDeclBuilder(value, db);
	}
    break;

  case 309:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 310:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addDeclBuilder(getDeclBuilderAt(subparser,2));
	  db.addPointer();
	  setDeclBuilder(value, db);
	}
    break;

  case 312:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  db.addPointer();
	  setDeclBuilder(value, db);
	}
    break;

  case 313:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 314:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addDeclBuilder(getDeclBuilderAt(subparser,2));
	  setDeclBuilder(value, db);
	}
    break;

  case 315:
    {
	  DeclBuilder db = new DeclBuilder();
	  DeclBuilder base = getDeclBuilderAt(subparser,3);
	  base.merge(getDeclBuilderAt(subparser,2));
	  db.addDeclBuilder(base);
	  setDeclBuilder(value, db);
	}
    break;

  case 316:
    {
	  DeclBuilder db = new DeclBuilder();
	  DeclBuilder base = getDeclBuilderAt(subparser,3);
	  db.addDeclBuilder(base);
	  db.merge(getDeclBuilderAt(subparser,1));
	  setDeclBuilder(value, db);
	}
    break;

  case 317:
    {
	  setDeclBuilder(value, new DeclBuilder(getStringAt(subparser, 1)));
	}
    break;

  case 318:
    {
	  DeclBuilder db = new DeclBuilder();
	  DeclBuilder base = getDeclBuilderAt(subparser,2);
	  db.addDeclBuilder(base);
	  setDeclBuilder(value, db);
	}
    break;

  case 319:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 320:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 321:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 322:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 323:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  db.addPointer();
	  setDeclBuilder(value, db);
	}
    break;

  case 324:
    {
					System.err.println("Unsupported grammar"); // TODO
					System.exit(1);
				}
    break;

  case 325:
    {
					System.err.println("Unsupported grammar"); // TODO
					//					System.exit(1);
				}
    break;

  case 326:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 327:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 328:
    {
	  DeclBuilder base = new DeclBuilder();
	  base.addDeclBuilder(getDeclBuilderAt(subparser,3));
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  base.merge(db);
	  setDeclBuilder(value,base);
	}
    break;

  case 329:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addDeclBuilder(getDeclBuilderAt(subparser,2));
	  setDeclBuilder(value, db);
	}
    break;

  case 331:
    { EnterScope(subparser); }
    break;

  case 332:
    { ExitReentrantScope(subparser); }
    break;

  case 334:
    {
	  DeclBuilder base = getDeclBuilderAt(subparser,2);
	  DeclBuilder array = getDeclBuilderAt(subparser,1);
	  base.merge(array);
	  setDeclBuilder(value,base);
	}
    break;

  case 335:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value, db);
	}
    break;

  case 336:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,2);
	  DeclBuilder superDecl = new DeclBuilder();
	  superDecl.addDeclBuilder(db);
	  setDeclBuilder(value,superDecl);
	}
    break;

  case 337:
    {
          setDeclBuilder(value, new DeclBuilder(getStringAt(subparser, 1)));
        }
    break;

  case 341:
    { EnterScope(subparser); }
    break;

  case 342:
    { ExitReentrantScope(subparser); }
    break;

  case 349:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,1);
	  setDeclBuilder(value,db);
	}
    break;

  case 353:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addArray("",false);
          setDeclBuilder(value, db);
        }
    break;

  case 354:
    {
	  DeclBuilder db = new DeclBuilder();
	  db.addArray("const Expr");
          setDeclBuilder(value, db);
	}
    break;

  case 355:
    {
	  DeclBuilder db = getDeclBuilderAt(subparser,4);
	  db.addArray("const Expr");
          setDeclBuilder(value, db);
	}
    break;

  case 419:
    { useIdent(subparser, getNodeAt(subparser, 1)); }
    break;

  case 421:
    { EnterScope(subparser); }
    break;

  case 422:
    { ExitScope(subparser); }
    break;

  case 433:
    { callFunction(subparser, getNodeAt(subparser, 3), null); }
    break;

  case 434:
    { callFunction(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 2)); }
    break;

  case 527:
    {
	  System.out.println("attributeList");
	}
    break;

