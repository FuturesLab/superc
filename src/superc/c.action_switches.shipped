  case 12:
                           { ReenterScope(subparser); }
    break;

  case 13:
                                                                                         { ExitScope(subparser); }
    break;

  case 15:
                               { ReenterScope(subparser); }
    break;

  case 16:
                                                                                                             { ExitScope(subparser); }
    break;

  case 19:
                               { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 20:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 21:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 22:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 23:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 24:
                                                         { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 25:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 26:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 27:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 28:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 29:
                                { bindFunDef(subparser, null, getNodeAt(subparser, 1)); }
    break;

  case 30:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 31:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 32:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 33:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 34:
                                 { ReenterScope(subparser); }
    break;

  case 35:
                                                                                                                             { ExitScope(subparser); }
    break;

  case 37:
                                     { ReenterScope(subparser); }
    break;

  case 38:
                                                                                                                                                 { ExitScope(subparser); }
    break;

  case 40:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 41:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 42:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 43:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 44:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 45:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 46:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 47:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 48:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 49:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 50:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 51:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindFunDef(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 54:
                                { KillReentrantScope(subparser); }
    break;

  case 56:
                           { KillReentrantScope(subparser); }
    break;

  case 58:
                        { KillReentrantScope(subparser); }
    break;

  case 60:
                               { KillReentrantScope(subparser); }
    break;

  case 62:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 64:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 66:
        {
          // reuses saved base type
          bindIdent(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 1));
        }
    break;

  case 68:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 70:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 72:
        {
          // reuses saved base type
          bindIdent(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 1));
        }
    break;

  case 84:
                     {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 85:
                                         {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 86:
                                                        {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 87:
                      {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 88:
                                          {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 91:
        {
          getSpecsAt(subparser, 1).add(Constants.ATT_CONSTANT);
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 92:
        {
          getSpecsAt(subparser, 1).add(Constants.ATT_VOLATILE);
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 93:
        {
          getSpecsAt(subparser, 1).add(Constants.ATT_RESTRICT);
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 94:
        {
          /* TODO AttributeSpecifier */
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 95:
        {
          getSpecsAt(subparser, 1).add(Constants.ATT_INLINE);
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 108:
                                         {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 109:
                                                 {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 110:
                                                         {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 111:
                                                  {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 112:
                      {           /* Arithmetic or void */
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 113:
                                          {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 114:
                                           {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 115:
                                           {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 141:
                                         {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 142:
                                                  {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 143:
                                                          {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 144:
                                                    {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 145:
                       {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 146:
                                           {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 147:
                                            {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 148:
                                             {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 149:
                          { getSpecsAt(subparser, 1).type = InternalT.VA_LIST; }
    break;

  case 150:
                    { getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_TYPEDEF; }
    break;

  case 151:
                    { getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_EXTERN; }
    break;

  case 152:
                    { getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_STATIC; }
    break;

  case 153:
                    { getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_AUTO; }
    break;

  case 154:
                    { getSpecsAt(subparser, 1).storage = Constants.ATT_STORAGE_REGISTER; }
    break;

  case 155:
                          { getSpecsAt(subparser, 1).type = VoidT.TYPE; }
    break;

  case 156:
                          { getSpecsAt(subparser, 1).seenChar = true; }
    break;

  case 157:
                          { getSpecsAt(subparser, 1).seenShort = true; }
    break;

  case 158:
                          { getSpecsAt(subparser, 1).seenInt = true; }
    break;

  case 159:
                          { getSpecsAt(subparser, 1).seenInt = true; }
    break;

  case 160:
                          { getSpecsAt(subparser, 1).longCount++; }
    break;

  case 161:
                          { getSpecsAt(subparser, 1).seenFloat = true; }
    break;

  case 162:
                          { getSpecsAt(subparser, 1).seenDouble = true; }
    break;

  case 163:
                          { getSpecsAt(subparser, 1).seenSigned = true; }
    break;

  case 164:
                          { getSpecsAt(subparser, 1).seenUnsigned = true; }
    break;

  case 165:
                          { getSpecsAt(subparser, 1).seenBool = true; }
    break;

  case 166:
                          { getSpecsAt(subparser, 1).seenComplex = true; }
    break;

  case 175:
               { EnterScope(subparser); }
    break;

  case 176:
                                { ExitScope(subparser); }
    break;

  case 177:
        {
          Node tag     = null;
          Node members = getNodeAt(subparser, 3);
          Node attrs   = null;
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 178:
                                         { EnterScope(subparser); }
    break;

  case 179:
                                { ExitScope(subparser); }
    break;

  case 180:
        {
          Node tag     = getNodeAt(subparser, 6);
          Node members = getNodeAt(subparser, 3);
          Node attrs   = null;
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 182:
                                        { EnterScope(subparser); }
    break;

  case 183:
                                { ExitScope(subparser); }
    break;

  case 184:
        {
          Node tag     = null;
          Node members = getNodeAt(subparser, 3);
          Node attrs   = getNodeAt(subparser, 6);
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 185:
                                                                { EnterScope(subparser); }
    break;

  case 186:
                                { ExitScope(subparser); }
    break;

  case 187:
        {
          Node tag     = getNodeAt(subparser, 6);
          Node members = getNodeAt(subparser, 3);
          Node attrs   = getNodeAt(subparser, 7);
          updateSpecs(subparser,
                      makeStructSpec(subparser, tag, members, attrs),
                      value);
        }
    break;

  case 189:
              { EnterScope(subparser); }
    break;

  case 190:
                                { ExitScope(subparser); }
    break;

  case 192:
                                        { EnterScope(subparser); }
    break;

  case 193:
                                { ExitScope(subparser); }
    break;

  case 196:
                                       { EnterScope(subparser); }
    break;

  case 197:
                                { ExitScope(subparser); }
    break;

  case 199:
                                                               { EnterScope(subparser); }
    break;

  case 200:
                                { ExitScope(subparser); }
    break;

  case 203:
        {
          ((Node) value).setProperty(SPECS, new Specifiers());
        }
    break;

  case 204:
                                                  {
          updateSpecs(subparser,
                      getSpecsAt(subparser, 2),
                      getSpecsAt(subparser, 1),
                      value);
        }
    break;

  case 233:
                   { BindEnum(subparser); }
    break;

  case 235:
                      { BindEnum(subparser); }
    break;

  case 253:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 255:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 257:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 259:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 261:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 263:
        {
          saveBaseType(subparser, getNodeAt(subparser, 2));
          bindIdent(subparser, getNodeAt(subparser, 2), getNodeAt(subparser, 1));
        }
    break;

  case 267:
                  { BindVar(subparser); }
    break;

  case 324:
        {
          /* setDecl(value, new PointerT(getDecl(getNodeAt(subparser, 1)))); */
          /* copyName(subparser, value, 1); */
        }
    break;

  case 325:
        {
          /* Specifiers spec = getSpecsAt(subparser, 2); */
          /* Type baseType = getDecl(getNodeAt(subparser, 1));; */
          /* Type result = spec.annotateBase(new PointerT(baseType).annotate()); */
          /* setDecl(value, result); */
          /* copyName(subparser, value, 1); */
        }
    break;

  case 330:
        {
          /* copyDeclName(subparser, value, 2); */
        }
    break;

  case 332:
               { EnterScope(subparser); }
    break;

  case 333:
                                                               { ExitReentrantScope(subparser); }
    break;

  case 336:
                         { /* copyDeclName(subparser, value, 1); */ }
    break;

  case 337:
                                                  { /* copyDeclName(subparser, value, 2); */ }
    break;

  case 338:
        {
          /* setDecl(value, lastSeenType(subparser)); */
          /* setName(value, getStringAt(subparser, 1)); */
        }
    break;

  case 342:
                                         { EnterScope(subparser); }
    break;

  case 343:
                                                                                   { ExitReentrantScope(subparser); }
    break;

  case 354:
        {
          /* setDecl(value, new ArrayT(getDecl(getNodeAt(subparser, 1)))); */
          /* copyName(subparser, value, 1); */
        }
    break;

  case 355:
        {
          /* setDecl(value, new ArrayT(getDecl())); */
          /* copyName(subparser, value, 1); */
        }
    break;

  case 420:
                   { useIdent(subparser, getNodeAt(subparser, 1)); }
    break;

  case 422:
               { EnterScope(subparser); }
    break;

  case 423:
                                                            { ExitScope(subparser); }
    break;

  case 434:
                                          { callFunction(subparser, getNodeAt(subparser, 3), null); }
    break;

  case 435:
                                                          { callFunction(subparser, getNodeAt(subparser, 4), getNodeAt(subparser, 2)); }
    break;


